rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Anyone authenticated can read user data
      allow read: if isAuthenticated();
      
      // Only the user themselves can update their non-critical fields
      allow update: if isOwner(userId) && 
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'ftp', 'maxHeartRate', 'email']));
      
      // Only admins can create or delete users
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Special rule for admins to update any user field
    match /users/{userId} {
      allow write: if isAdmin();
    }
    
    // Username mappings - used for quick login
    match /usernames/{username} {
      // Anyone can read (needed for login check)
      allow read: if true;
      
      // Only authenticated users can create/update their own username
      allow create: if isAuthenticated() && 
        request.resource.data.uid == request.auth.uid;
      
      // Only admin or owner can update
      allow update: if isAuthenticated() && 
        (isAdmin() || request.resource.data.uid == request.auth.uid);
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Admin-only collections (future use)
    match /settings/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Workout sessions (future feature)
    match /sessions/{sessionId} {
      // Users can read their own sessions
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.userId == request.auth.uid);
      
      // Users can create their own sessions
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update their own sessions
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
  }
}
